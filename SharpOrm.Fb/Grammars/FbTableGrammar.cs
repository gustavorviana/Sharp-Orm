using SharpOrm.Builder;
using SharpOrm.Builder.Grammars;
using SharpOrm.Msg;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace SharpOrm.Fb.Grammars
{
    public class FbTableGrammar : TableGrammar
    {
        public FbTableGrammar(QueryConfig config, TableSchema schema) : base(config, schema)
        {
        }

        public override SqlExpression Create()
        {
            if (Schema.BasedQuery != null)
                return CreateBased();

            var query = GetCreateBase()
                .Add(" (")
                .AddJoin(",", Schema.Columns.Select(GetColumnDefinition));

            WriteUnique(query);
            WritePk(query);

            return query.Add(')').ToExpression();
        }

        private SqlExpression CreateBased()
        {
            return GetCreateBase()
                .Add(" AS ")
                .Add(new FbGrammar(Schema.BasedQuery).Select())
                .ToExpression();
        }

        private QueryBuilder GetCreateBase()
        {
            var builder = GetBuilder().Add("CREATE");

            if (Schema.Temporary)
                builder.Add(" GLOBAL TEMPORARY");

            return builder
                .Add(" TABLE ")
                .Add(Config.ApplyNomenclature(Name.Name));
        }

        private string GetColumnDefinition(System.Data.DataColumn column)
        {
            if (column.ColumnName.Contains("."))
                throw new InvalidOperationException(Messages.Query.ColumnNotSuportDot);

            if (GetCustomColumnTypeMap(column) is ColumnTypeMap map)
                return map.GetTypeString(column);

            if (GetExpectedColumnType(column) is string typeColumn)
                return typeColumn;

            string columnName = Config.ApplyNomenclature(column.ColumnName);
            string dataType = GetFirebirdDataType(column);
            string autoIncrement = column.AutoIncrement ? " GENERATED BY DEFAULT AS IDENTITY" : string.Empty;
            string nullable = column.AllowDBNull ? "NULL" : "NOT NULL";

            return string.Concat(columnName, " ", dataType, " ", nullable, autoIncrement);
        }

        private string GetFirebirdDataType(System.Data.DataColumn column)
        {
            var dataType = column.DataType;

            if (dataType == typeof(int))
                return "INTEGER";

            if (dataType == typeof(long))
                return "BIGINT";

            if (dataType == typeof(short))
                return "SMALLINT";

            if (dataType == typeof(byte))
                return "SMALLINT";

            if (dataType == typeof(float))
                return "FLOAT";

            if (dataType == typeof(double))
                return "DOUBLE PRECISION";

            if (dataType == typeof(decimal))
                return "DECIMAL(18,2)";

            if (dataType == typeof(bool))
                return "BOOLEAN";

            if (dataType == typeof(string))
                return column.MaxLength <= 0 ? "VARCHAR(255)" : $"VARCHAR({column.MaxLength})";

            if (dataType == typeof(char))
                return "CHAR(1)";

            if (dataType == typeof(DateTime))
                return "TIMESTAMP";

            if (dataType == typeof(TimeSpan))
                return "TIME";

            if (dataType == typeof(byte[]))
                return "BLOB SUB_TYPE 0";

            if (dataType == typeof(Guid))
                return "CHAR(36)";

            throw new ArgumentException(string.Format(Messages.Table.UnsupportedType, dataType.Name));
        }

        public override SqlExpression Drop()
        {
            return GetBuilder()
                .Add("DROP TABLE ")
                .Add(Config.ApplyNomenclature(Name.Name))
                .ToExpression();
        }

        public override SqlExpression Exists()
        {
            var builder = GetBuilder()
                .Add("SELECT COUNT(*) FROM RDB$RELATIONS R WHERE R.RDB$RELATION_TYPE");

            if (Schema.Temporary) builder.Add(" IN (4,5)");
            else builder.Add(" IN (0, 2, 3)");

            builder.Add(" AND R.RDB$RELATION_NAME = UPPER(?)", Name.Name);
            return builder.ToExpression();
        }

        public override SqlExpression Truncate()
        {
            return GetBuilder()
                .Add("DELETE FROM ")
                .Add(Config.ApplyNomenclature(Name.Name))
                .ToExpression();
        }
    }
}
