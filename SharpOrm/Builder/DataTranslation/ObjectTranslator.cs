using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Linq;

namespace SharpOrm.Builder.DataTranslation
{
    public class ObjectTranslator : IObjectTranslator
    {
        private readonly Dictionary<Type, TableInfo> cachedTables = new Dictionary<Type, TableInfo>();
        private readonly object lockObj = new object();

        public TranslationConfig Config { get; }

        public ObjectTranslator(TranslationConfig config)
        {
            this.Config = config;
        }

        public T ParseFromReader<T>(DbDataReader reader) where T : new()
        {
            return (T)this.ParseFromReader(typeof(T), reader, "");
        }

        private object ParseFromReader(Type typeToParse, DbDataReader reader, string prefix)
        {
            if (typeToParse == typeof(Row))
                return reader.GetRow(this.Config);

            var loader = this.GetLoader(typeToParse);
            object obj = Activator.CreateInstance(typeToParse);
            foreach (var column in loader.Column)
                this.LoadPropertyValue(obj, loader, reader, column, prefix);

            return obj;
        }

        private void LoadPropertyValue(object obj, TableInfo table, DbDataReader reader, ColumnInfo column, string fullName)
        {
            if (!string.IsNullOrEmpty(fullName) && column.AutoGenerated)
                fullName += "_" + column.Name;

            bool isNative = NativeSqlValueConversor.IsNative(column.Type);
            string validName = new[] { column.Name, fullName }.FirstOrDefault(x => !string.IsNullOrEmpty(x));
            int index = reader.GetIndexOf(validName);
            if ((!isNative || index == -1) && !column.Required)
                return;

            if (isNative || column.Translation != null)
            {
                if (index < 0)
                    throw new KeyNotFoundException($"Could not find column in database with key {validName}, failed to load value for {column.DeclaringType.FullName}.{column.Name}.");

                column.Set(obj, reader[index]);
                return;
            }

            if (string.IsNullOrEmpty(fullName))
                fullName = column.Name;

            column.SetRaw(obj, this.ParseFromReader(column.Type, reader, fullName));
        }

        public Row ToRow(object obj, Type type)
        {
            if (obj is Row row)
                return row;

            return new Row(this.GetLoader(type).GetCells(obj).ToArray());
        }

        public string GetTableNameOf(Type type)
        {
            return GetLoader(type).Name;
        }

        public TableInfo GetLoader(Type type)
        {
            lock (lockObj)
            {
                if (this.cachedTables.TryGetValue(type, out var loader))
                    return loader;

                this.cachedTables.Add(type, loader = new TableInfo(this.Config, type));
                return loader;
            }
        }
    }
}
