using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace SharpOrm.Builder.DataTranslation.Reader
{
    internal class MappedObject
    {
        #region Properties\Fields
        private readonly Dictionary<string, ColumnInfo> Columns = new Dictionary<string, ColumnInfo>();
        private readonly List<MappedObject> MappedChildrens = new List<MappedObject>();
        private readonly TranslationRegistry registry;
        private ColumnInfo parentColumn;
        private MappedObject parent;

        private Type type;
        private object _instance;
        public object Instance => this._instance;

        public Action<ColumnInfo> OnFoundFk;
        #endregion

        public MappedObject(TranslationRegistry registry, Type type, string prefix)
        {
            this.registry = registry;
            this.type = type;
            this.Map(prefix);
        }

        private void Map(string prefix)
        {
            if (!string.IsNullOrEmpty(prefix) && !prefix.EndsWith('_'))
                prefix += '_';

            foreach (var column in TableInfo.GetColumns(this.type, this.registry))
                if (column.IsForeignKey) this.OnFoundFk?.Invoke(column);
                else if (column.IsNative) this.Columns.Add(GetName(column, prefix), column);
                else this.MappedChildrens.Add(new MappedObject(this.registry, column.Type, prefix + column.Name) { parentColumn = column, parent = this });
        }

        private static string GetName(ColumnInfo column, string prefix)
        {
            return column.AutoGenerated && prefix.Length != 0 ? prefix + column.Name : column.Name;
        }

        public object NewObject()
        {
            this._instance = Activator.CreateInstance(this.type);

            foreach (var children in this.MappedChildrens)
                children.parentColumn.SetRaw(this.parent.Instance, children.NewObject());

            return this._instance;
        }

        public bool SetValue(string key, object value)
        {
            if (this.Columns.TryGetValue(key, out ColumnInfo column))
            {
                column.Set(this._instance, value);
                return true;
            }

            foreach (var children in this.MappedChildrens)
                if (children.SetValue(key, value))
                    return true;

            return false;
        }
    }
}
