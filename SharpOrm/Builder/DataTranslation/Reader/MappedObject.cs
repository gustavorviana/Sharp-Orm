using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Linq;
using System.Text;

namespace SharpOrm.Builder.DataTranslation.Reader
{
    public class MappedObject
    {
        #region Properties\Fields
        private readonly List<MappedObject> childrens = new List<MappedObject>();
        private readonly List<MappedColumn> fkColumns = new List<MappedColumn>();
        private readonly List<MappedColumn> columns = new List<MappedColumn>();
        private readonly object _lock = new object();
        private ColumnInfo parentColumn;
        private MappedObject parent;

        public Type Type { get; }
        private object instance;
        #endregion

        public static MappedObject Create<T>(DbDataReader reader, TranslationRegistry registry = null, string prefix = "") where T : class
        {
            return Create(reader, typeof(T), registry, prefix);
        }

        public static MappedObject Create(DbDataReader reader, Type type, TranslationRegistry registry = null, string prefix = "")
        {
            if (registry == null)
                registry = TranslationRegistry.Default;

            return new MappedObject(type).Map(registry, reader, prefix);
        }

        private MappedObject(Type type)
        {
            this.Type = type;
        }

        private MappedObject Map(TranslationRegistry registry, DbDataReader reader, string prefix)
        {
            if (!string.IsNullOrEmpty(prefix) && !prefix.EndsWith("_"))
                prefix += '_';

            foreach (var column in TableInfo.GetColumns(this.Type, registry))
                if (column.IsForeignKey) AddIfValidId(reader, this.fkColumns, column.ForeignKey, column);
                else if (column.IsNative) AddIfValidId(reader, this.columns, GetName(column, prefix), column);
                else this.childrens.Add(new MappedObject(column.Type) { parentColumn = column, parent = this }.Map(registry, reader, prefix + column.Name));

            return this;
        }

        private void AddIfValidId(DbDataReader reader, List<MappedColumn> columns, string name, ColumnInfo column)
        {
            int index = reader.GetIndexOf(name);
            if (index >= 0)
                columns.Add(new MappedColumn(column, index));
        }

        private static string GetName(ColumnInfo column, string prefix)
        {
            return column.AutoGenerated && prefix.Length != 0 ? (prefix + column.Name).ToLower() : column.Name.ToLower();
        }

        [Obsolete]
        public object Read(DbDataReader reader, TableReader tableReader)
        {
            lock (_lock)
            {
                this.NewObject();

                for (int i = 0; i < reader.FieldCount; i++)
                    this.SetValue(i, reader[i], tableReader);

                return this.instance;
            }
        }

        [Obsolete]
        private void SetValue(int index, object value, TableReader reader)
        {
            this.EnqueueFk(index, value, reader);

            foreach (var column in this.columns)
                if (column.Index == index)
                    column.Set(this.instance, value);

            foreach (var children in this.childrens)
                children.SetValue(index, value, reader);
        }

        [Obsolete]
        private void EnqueueFk(int index, object value, TableReader reader)
        {
            foreach (var column in this.fkColumns)
                if (column.Index == index)
                    reader.EnqueueForeign(this.instance, value, column.Column);
        }

        public object Read(DbDataReader reader, DbObjectReader objReader)
        {
            lock (this._lock)
            {
                if (this.Type == typeof(Row))
                    return reader.ReadRow(objReader.config);

                this.NewObject();

                for (int i = 0; i < reader.FieldCount; i++)
                    this.SetValue(i, reader[i], objReader);

                return this.instance;
            }
        }

        private object NewObject()
        {
            this.instance = Activator.CreateInstance(this.Type);

            foreach (var children in this.childrens)
                children.parentColumn.SetRaw(children.parent.instance, children.NewObject());

            return this.instance;
        }

        private void SetValue(int index, object value, DbObjectReader reader)
        {
            this.EnqueueFk(index, value, reader);

            foreach (var column in this.columns)
                if (column.Index == index)
                    column.Set(this.instance, value);

            foreach (var children in this.childrens)
                children.SetValue(index, value, reader);
        }

        private void EnqueueFk(int index, object value, DbObjectReader reader)
        {
            foreach (var column in this.fkColumns)
                if (column.Index == index)
                    reader.EnqueueForeign(this.instance, value, column.Column);
        }

        private class MappedColumn
        {
            public ColumnInfo Column { get; }
            public int Index { get; }

            public MappedColumn(ColumnInfo column, int index)
            {
                this.Column = column;
                this.Index = index;
            }

            public void Set(object owner, object value)
            {
                this.Column.Set(owner, value);
            }
        }
    }
}
