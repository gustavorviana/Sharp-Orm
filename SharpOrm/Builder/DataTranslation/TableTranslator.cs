using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Linq;

namespace SharpOrm.Builder.DataTranslation
{
    public class TableTranslator : TableTranslatorBase
    {
        public TableTranslator(TranslationRegistry registry) : base(registry)
        {
        }

        protected override object ParseFromReader(Type typeToParse, DbDataReader reader, string prefix)
        {
            var loader = this.GetLoader(typeToParse);
            object obj = Activator.CreateInstance(typeToParse);
            foreach (var column in loader.Column)
                this.LoadPropertyValue(obj, loader, reader, column, prefix);

            return obj;
        }

        private void LoadPropertyValue(object obj, TableInfo table, DbDataReader reader, ColumnInfo column, string fullName)
        {
            if (!string.IsNullOrEmpty(fullName) && column.AutoGenerated)
                fullName += "_" + column.Name;

            bool isNative = NativeSqlValueConversor.IsNative(column.Type);
            string validName = new[] { column.Name, fullName }.FirstOrDefault(x => !string.IsNullOrEmpty(x));
            int index = reader.GetIndexOf(validName);
            if ((!isNative || index == -1) && !column.Required)
                return;

            if (isNative || column.Translation != null)
            {
                if (index < 0)
                    throw new KeyNotFoundException($"Could not find column in database with key {validName}, failed to load value for {column.DeclaringType.FullName}.{column.Name}.");

                column.Set(obj, reader[index]);
                return;
            }

            if (string.IsNullOrEmpty(fullName))
                fullName = column.Name;

            column.SetRaw(obj, this.ParseFromReader(column.Type, reader, fullName));
        }
    }
}
