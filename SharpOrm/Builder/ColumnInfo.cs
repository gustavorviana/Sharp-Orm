using SharpOrm.DataTranslation;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Reflection;

namespace SharpOrm.Builder
{
    /// <summary>
    /// Represents information about a column in a database table.
    /// </summary>
    public class ColumnInfo : IEquatable<ColumnInfo>, IColumnInfo
    {
        #region Properties
        protected internal readonly MemberInfo column;
        public ValidationAttribute[] Validations { get; }

        /// <summary>
        /// Gets the name of the column.
        /// </summary>
        public string Name { get; }

        /// <summary>
        /// Gets a value indicating whether the column is a primary key.
        /// </summary>
        public bool Key { get; }

        /// <summary>
        /// Gets the order of the column.
        /// </summary>
        public int Order { get; }

        /// <summary>
        /// Gets the type of the declaring class.
        /// </summary>
        public Type DeclaringType => this.column.DeclaringType;

        /// <summary>
        /// Gets the type of the column.
        /// </summary>
        public Type Type { get; }

        /// <summary>
        /// Gets the SQL translation for the column.
        /// </summary>
        public ISqlTranslation Translation { get; }

        /// <summary>
        /// Gets the foreign key info of the column.
        /// </summary>
        public ForeignAttribute ForeignInfo { get; }

        /// <summary>
        /// Gets a value indicating whether the column name is auto-generated.
        /// </summary>
        public bool AutoGenerated { get; }

        /// <summary>
        /// Indicate whether the column type is a C# primitive type or a Stream.
        /// </summary>
        public bool IsNative { get; }

        public string PropName => this.column?.Name;

        public MapNestedAttribute MapNested { get; }

        private Type _validType = null;
        #endregion

        /// <summary>
        /// Initializes a new instance of the <see cref="ColumnInfo"/> class for a field.
        /// </summary>
        /// <param name="registry">The translation registry.</param>
        /// <param name="fieldInfo">The field information.</param>
        public ColumnInfo(TranslationRegistry registry, FieldInfo fieldInfo) : this(fieldInfo, fieldInfo.FieldType, registry, registry.GetOf(fieldInfo))
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ColumnInfo"/> class for a property.
        /// </summary>
        /// <param name="registry">The translation registry.</param>
        /// <param name="propertyInfo">The property information.</param>
        public ColumnInfo(TranslationRegistry registry, PropertyInfo propertyInfo) : this(propertyInfo, propertyInfo.PropertyType, registry, registry.GetOf(propertyInfo))
        {
        }

        private ColumnInfo(MemberInfo member, Type type, TranslationRegistry registry, ISqlTranslation translation)
        {
            Type = type;
            column = member;
            Translation = translation ?? registry.GetFor(Type);
            IsNative = TranslationUtils.IsNative(type, false);
            MapNested = member.GetCustomAttribute<MapNestedAttribute>();

            ForeignInfo = GetForeign();

            ColumnAttribute colAttr = GetAttribute<ColumnAttribute>();

            AutoGenerated = string.IsNullOrEmpty(colAttr?.Name);
            Name = colAttr?.Name ?? member.Name;
            Order = colAttr?.Order ?? -1;

            Key = Iskey(column);
            Validations = column.GetCustomAttributes<ValidationAttribute>().ToArray();
        }

        internal ColumnInfo(MemberInfo member, IColumnInfo map, TranslationRegistry registry)
        {
            column = member;
            Type = ReflectionUtils.GetMemberType(member);
            IsNative = TranslationUtils.IsNative(Type, false);

            AutoGenerated = map.AutoGenerated;
            Translation = map.Translation ?? registry.GetFor(Type);
            ForeignInfo = map.ForeignInfo;
            Validations = map.Validations;
            Order = map.Order;
            Name = map.Name;
            Key = map.Key;
        }

        internal static bool Iskey(MemberInfo member)
        {
            return member.GetCustomAttribute<KeyAttribute>() != null || member.Name.Equals("id", StringComparison.OrdinalIgnoreCase);
        }

        internal static bool CanWork(PropertyInfo prop)
        {
            return prop.CanRead && prop.CanWrite && prop.GetCustomAttribute<NotMappedAttribute>() == null;
        }

        internal static bool CanWork(FieldInfo field)
        {
            return !field.IsInitOnly && field.GetCustomAttribute<NotMappedAttribute>() == null;
        }

        private ForeignAttribute GetForeign()
        {
            if (this.GetAttribute<ForeignAttribute>() is ForeignAttribute fka)
                return fka;

            var attr = this.GetAttribute<ForeignKeyAttribute>();
            if (attr == null) return null;

            return new ForeignAttribute(attr.Name);
        }

        public static string GetName(MemberInfo member)
        {
            return member.GetCustomAttribute<ColumnAttribute>()?.Name ?? member.Name;
        }

        /// <summary>
        /// Gets the specified attribute applied to the column.
        /// </summary>
        /// <typeparam name="T">The type of the attribute.</typeparam>
        /// <returns>The attribute instance if found; otherwise, <c>null</c>.</returns>
        public T GetAttribute<T>() where T : Attribute
        {
            return this.column.GetCustomAttribute<T>();
        }

        /// <summary>
        /// Sets the value of the column for the specified owner object.
        /// </summary>
        /// <param name="owner">The owner object.</param>
        /// <param name="value">The value to set.</param>
        public void Set(object owner, object value)
        {
            this.SetRaw(owner, this.Translation.FromSqlValue(value, this.GetValidValueType()));
        }

        /// <summary>
        /// Sets the raw value of the column for the specified owner object.
        /// </summary>
        /// <param name="owner">The owner object.</param>
        /// <param name="value">The raw value to set.</param>
        public virtual void SetRaw(object owner, object value)
        {
            ReflectionUtils.SetMemberValue(this.column, owner, value);
        }

        /// <summary>
        /// Gets the value of the column for the specified owner object.
        /// </summary>
        /// <param name="owner">The owner object.</param>
        /// <returns>The value of the column.</returns>
        public object Get(object owner)
        {
            return this.Translation?.ToSqlValue(this.GetRaw(owner), this.GetValidValueType());
        }

        /// <summary>
        /// Gets the raw value of the column for the specified owner object.
        /// </summary>
        /// <param name="owner">The owner object.</param>
        /// <returns>The raw value of the column.</returns>
        public virtual object GetRaw(object owner)
        {
            return ReflectionUtils.GetMemberValue(this.column, owner);
        }

        protected Type GetValidValueType()
        {
            if (this._validType == null)
                this._validType = TranslationRegistry.GetValidTypeFor(this.Type);

            return this._validType;
        }

        /// <summary>
        /// Validate if the class has valid properties/fields.
        /// </summary>
        /// <param name="owner">Object whose property/field is to be validated.</param>
        public void Validate(object owner)
        {
            this.ValidateValue(this.Get(owner));
        }

        /// <summary>
        /// Validate the inserted value according to the attributes applied to the property/field.
        /// </summary>
        /// <param name="value">Value to be validated.</param>
        public void ValidateValue(object value)
        {
            if (value == DBNull.Value)
                value = null;

            for (int i = 0; i < Validations.Length; i++)
                Validations[i].Validate(value, this.Name);
        }

        public override string ToString()
        {
            return string.Format("{0}: {1}", this.Name, this.Type);
        }

        #region IEquatable
        public override bool Equals(object obj)
        {
            return Equals(obj as ColumnInfo);
        }

        public bool Equals(ColumnInfo other)
        {
            return !(other is null) &&
                   EqualityComparer<MemberInfo>.Default.Equals(column, other.column) &&
                   Name == other.Name &&
                   Key == other.Key &&
                   Order == other.Order &&
                   EqualityComparer<Type>.Default.Equals(DeclaringType, other.DeclaringType) &&
                   EqualityComparer<Type>.Default.Equals(Type, other.Type) &&
                   EqualityComparer<ISqlTranslation>.Default.Equals(Translation, other.Translation) &&
                   ForeignInfo == other.ForeignInfo &&
                   AutoGenerated == other.AutoGenerated;
        }

        public override int GetHashCode()
        {
            int hashCode = -1825907665;
            hashCode = hashCode * -1521134295 + EqualityComparer<MemberInfo>.Default.GetHashCode(column);
            hashCode = hashCode * -1521134295 + EqualityComparer<string>.Default.GetHashCode(Name);
            hashCode = hashCode * -1521134295 + Key.GetHashCode();
            hashCode = hashCode * -1521134295 + Order.GetHashCode();
            hashCode = hashCode * -1521134295 + EqualityComparer<Type>.Default.GetHashCode(DeclaringType);
            hashCode = hashCode * -1521134295 + EqualityComparer<Type>.Default.GetHashCode(Type);
            hashCode = hashCode * -1521134295 + EqualityComparer<ISqlTranslation>.Default.GetHashCode(Translation);
            hashCode = hashCode * -1521134295 + EqualityComparer<ForeignAttribute>.Default.GetHashCode(ForeignInfo);
            hashCode = hashCode * -1521134295 + AutoGenerated.GetHashCode();
            return hashCode;
        }

        public static bool operator ==(ColumnInfo left, ColumnInfo right)
        {
            return EqualityComparer<ColumnInfo>.Default.Equals(left, right);
        }

        public static bool operator !=(ColumnInfo left, ColumnInfo right)
        {
            return !(left == right);
        }
        #endregion
    }
}